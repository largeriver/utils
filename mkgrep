#!/usr/bin/env python3
# coding:utf-8

import argparse
import glob
import os
import re
from os.path import join, basename
from itertools import  chain

file_count = 0
line_count = 0

'''
todo:
- 高亮关键字
- 打印前后相关的行
- 支持自动查找sepolicy路径

'''

matched_count = 0
and_flag = True  #
words = list()
sepolicy_dirs = list()
flag_match_word = True


class colors:
    ''' Class used to set console colors '''
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    @classmethod
    def disable(cls):
        cls.HEADER = ''
        cls.OKBLUE = ''
        cls.OKGREEN = ''
        cls.WARNING = ''
        cls.FAIL = ''
        cls.ENDC = ''


def whole_match(words, line):
    # line_words = re.findall('\w+', line)
    line_words = re.findall('[a-zA-Z0-9-_]+', line)
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w for w in words if w in line_words)):
        return True
    if and_flag and all([w in line_words for w in words]):
        return True
    return False


def part_match(words, line):
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w in line for w in words)):
        return True
    if and_flag and all([w in line for w in words]):
        return True
    return False


def grep_func(file_name):
    global and_flag
    global words
    global matched_count
    global line_count
    global file_count
    file_count = file_count + 1
    with open(file_name, 'r') as fh:
        for index, line in enumerate(fh, 1):
            line = line.strip()
            if not line: continue
            if not line.startswith("#"):
                line_count = line_count + 1
            # print line

            if line.startswith("#") and not line.startswith("##"):
                continue

            matched = whole_match(words, line) if flag_match_word else part_match(words, line)
            if matched:
                color_line = line.rstrip()
                for word in words:
                    color_line = color_line.replace(word, colors.WARNING + word + colors.ENDC)
                print("{} ({}):{}".format(colors.HEADER + basename(file_name) + colors.ENDC, index, color_line))
                matched_count += 1


if __name__ == '__main__':
    myParser = argparse.ArgumentParser(description='在策略中查找关键字')
    myParser.add_argument('words', metavar='word', type=str, nargs='+', help='words list to search')
    myParser.add_argument('--or', action='store_false', dest="and_flag", default=True, help="或运算")
    myParser.add_argument('--and', action='store_true', dest="and_flag", help="与运算")
    myParser.add_argument('--part', action="store_false", default=True, help="部分匹配，默认为整字匹配")
    myParser.add_argument('--fp', action='append', help="指定需要查询的文件匹配模式，默认为查询所有的.txt和.log文件")

    args = myParser.parse_args()

    # print args
    and_flag = args.and_flag
    words = args.words
    flag_match_word = args.part
    file_patterns = args.fp if args.fp else ["*.txt", "*.log"]

    search_root = os.path.abspath(os.path.curdir)
    print("dirs=", search_root)
    for root, dirs, files in os.walk(search_root, topdown=True):
        print("*** searching {}/ ***".format(root[len(search_root)+1:]))
        os.chdir(root)

        for file in chain(*[glob.glob(fp) for fp in file_patterns]):
            if not os.path.isfile(file):
                continue
            grep_func(join(root, file))

    os.chdir(search_root)
    print("*file_count=", file_count)
    print("*line_count=", line_count)
    print("*matched=", matched_count)
