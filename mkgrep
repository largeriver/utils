#!/usr/bin/env python3
# coding:utf-8

import argparse
import glob
import linecache
import logging
import os
import re
from itertools import chain
from os.path import join, basename

file_count = 0
line_count = 0

'''
todo:

'''

matched_count = 0
and_flag = True  #
words = list()
sepolicy_dirs = list()
flag_match_word = True

num_before = 0
num_after = 0


class colors:
    ''' Class used to set console colors '''
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    @classmethod
    def disable(cls):
        cls.HEADER = ''
        cls.OKBLUE = ''
        cls.OKGREEN = ''
        cls.WARNING = ''
        cls.FAIL = ''
        cls.ENDC = ''


def whole_match(words, line):
    # line_words = re.findall('\w+', line)
    pattern = re.compile('[a-zA-Z0-9-_]+')
    line_words = re.findall(pattern, line)
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w for w in words if w in line_words)):
        return True
    if and_flag and all([w in line_words for w in words]):
        return True
    return False


def part_match(words, line):
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w in line for w in words)):
        return True
    if and_flag and all([w in line for w in words]):
        return True
    return False


def grep_func(file_name):
    global and_flag
    global words
    global matched_count
    global line_count
    global file_count
    file_count += + 1

    matched_lines = []

    for num, line in enumerate(linecache.getlines(file_name), 1):
        line = line.strip()
        if not line: continue
        if not line.startswith("#"):
            line_count += 1
        # print line

        if line.startswith("#") and not line.startswith("##"):
            continue

        matched = whole_match(words, line) if flag_match_word else part_match(words, line)
        if matched:
            matched_lines.append(num)
            matched_count += 1

    max_num = num

    if matched_lines:
        line_nums = set()
        # 计算所有的行
        for num in matched_lines:
            line_nums = line_nums.union(
                filter(lambda n: 0 <= n <= max_num, range(num - num_before, num + num_after + 1)))

        for num in line_nums:
            line = linecache.getline(file_name, num).rstrip()

            header_color = colors.HEADER
            if num in matched_lines:
                for word in words:
                    line = line.replace(word, colors.WARNING + word + colors.ENDC)
                    header_color = colors.WARNING

            print("{} ({}):{}".format(header_color + basename(file_name) + colors.ENDC, num, line))

        print("\n")


if __name__ == '__main__':

    myParser = argparse.ArgumentParser(description='文本多关键字匹配')
    myParser.add_argument('words', metavar='word', type=str, nargs='+', help='words list to search')
    myParser.add_argument('--or', action='store_false', dest="and_flag", default=True, help="或运算")
    myParser.add_argument('--and', action='store_true', dest="and_flag", help="与运算")
    myParser.add_argument('--part', action="store_false", default=True, help="部分匹配，默认为整字匹配")
    myParser.add_argument('-A', '--after', action="store", default=0, type=int,
                          help="Print  NUM  lines  of trailing context after matching lines.")
    myParser.add_argument('-B', '--before', action="store", default=0, type=int,
                          help="Print NUM lines of leading context before matching  lines.")
    myParser.add_argument('-C', '--context', action="store", default=0, type=int,
                          help="Print  NUM  lines of output context.")

    myParser.add_argument('--fp', action='append', help="指定需要查询的文件名匹配模式，默认为*.txt,*.log, \
                                                        用法:--fp \"*.txt\" --fp \"*.ini\"")

    args = myParser.parse_args()

    logging.basicConfig(level=logging.DEBUG)

    # print args
    and_flag = args.and_flag
    words = args.words
    num_before = max(args.before, args.context)
    num_after = max(args.after, args.context)
    flag_match_word = args.part
    file_patterns = args.fp if args.fp else ["*.txt", "*.log"]
    logging.debug("file patterns:{}".format(file_patterns))

    search_root = os.path.abspath(os.path.curdir)
    print("dirs=", search_root)
    for root, dirs, files in os.walk(search_root, topdown=True):
        print("*** searching {}/ ***".format(root[len(search_root) + 1:]))
        os.chdir(root)

        for file in chain(*[glob.glob(fp) for fp in file_patterns]):
            if not os.path.isfile(file):
                continue
            grep_func(join(root, file))

    os.chdir(search_root)
    print("*file_count=", file_count)
    print("*line_count=", line_count)
    print("*matched=", matched_count)
