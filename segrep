#!/usr/bin/env python3
# coding:utf8
import argparse
import linecache
import os
import re
from os.path import join, basename

file_count = 0
line_count = 0

'''
todo:
'''

# $ANDROID_BUILD_TOP='/disk01/work/work_berg/COSHIP_X1_5_0_last'
android_build_top = os.getenv('ANDROID_BUILD_TOP')
SEPOLICY_DIRS = [android_build_top + "/device/qcom/sepolicy/common/", android_build_top + "/external/sepolicy/",
                 android_build_top + "/external/tios_sepolicy/",android_build_top + "/external/tios_sepolicy/H1OPEN"]

sepolicy_build_files = ['attributes', "security_classes", "access_vectors",
                        'mls', 'roles', 'users',
                        "initial_sids",
                        'policy_capabilities',
                        'fs_use',
                        'te_macros', "global_macros", 'mls_macros',
                        'file_contexts', 'genfs_contexts', 'initial_sid_contexts', 'port_contexts', 'service_contexts',
                        'tios_macros',
                        '*.te']
matched_count = 0
and_flag = True  #
words = list()
sepolicy_dirs = list()
flag_match_word = True

num_before = 0
num_after = 0

###################################################################################
class colors:
    ''' Class used to set console colors '''
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    @classmethod
    def disable(cls):
        cls.HEADER = ''
        cls.OKBLUE = ''
        cls.OKGREEN = ''
        cls.WARNING = ''
        cls.FAIL = ''
        cls.ENDC = ''


def whole_match(words, line):
    # line_words = re.findall('\w+', line)
    pattern = re.compile('[a-zA-Z0-9-_]+')
    line_words = re.findall(pattern, line)

    if (not and_flag) and any((w for w in words if w in line_words)):
        return True
    if and_flag and all([w in line_words for w in words]):
        return True
    return False


def part_match(words, line):
    if (not and_flag) and any((w in line for w in words)):
        return True
    if and_flag and all([w in line for w in words]):
        return True
    return False


def display_file(file_name, matched_lines, max_num, num_before, num_after):
    # 将同一个文件中，所有匹配的行，以及要求显示的上下邻近行，一次性显示，。
    # 需要显示的所有的行，set 遍历整数时是有序的
    line_nums = set()
    # 计算所有的行
    for num in matched_lines:
        line_nums = line_nums.union(
            filter(lambda n: 0 <= n <= max_num, range(num - num_before, num + num_after + 1)))

    for num in line_nums:
        line = linecache.getline(file_name, num).rstrip()

        header_color = colors.HEADER
        if num in matched_lines:
            for word in words:
                line = line.replace(word, colors.FAIL + word + colors.ENDC)
                header_color = colors.WARNING

        print("{} ({}):{}".format(header_color + basename(file_name) + colors.ENDC, num, line))

    print("\n")


def grep_func(file_name):
    global and_flag
    global words
    global matched_count
    global line_count
    global file_count
    file_count += + 1

    matched_lines = []

    for num, line in enumerate(linecache.getlines(file_name), 1):
        line = line.strip()
        if not line: continue
        if not line.startswith("#"):
            line_count += 1
        # print line

        if line.startswith("#") and not line.startswith("##"):
            continue

        matched = whole_match(words, line) if flag_match_word else part_match(words, line)
        if matched:
            matched_lines.append(num)
            matched_count += 1

    max_num = num

    if matched_lines:
        display_file(file_name,matched_lines,max_num,num_before,num_after)

##########################################################################

if __name__ == '__main__':
    myParser = argparse.ArgumentParser(description='在策略中查找关键字')
    myParser.add_argument('words', metavar='word', type=str, nargs='+', help='words list to search')
    myParser.add_argument('--or', action='store_false', dest="and_flag", default=True, help="或运算")
    myParser.add_argument('--and', action='store_true', dest="and_flag", help="与运算")
    myParser.add_argument('--here', action="store_true", default=False, help="仅搜索当前目录")
    myParser.add_argument('--part', action="store_false", default=True, help="部分匹配，默认为整字匹配")
    myParser.add_argument('-A', '--after', action="store", default=0, type=int,
                          help="Print  NUM  lines  of trailing context after matching lines.")
    myParser.add_argument('-B', '--before', action="store", default=0, type=int,
                          help="Print NUM lines of leading context before matching  lines.")
    myParser.add_argument('-C', '--context', action="store", default=0, type=int,
                          help="Print  NUM  lines of output context.")
    args = myParser.parse_args()

    # print args
    and_flag = args.and_flag
    words = args.words
    sepolicy_dirs = SEPOLICY_DIRS if not args.here else [os.path.abspath(os.path.curdir)]
    num_before = max(args.before, args.context)
    num_after = max(args.after, args.context)
    flag_match_word = args.part
    print("dirs=", sepolicy_dirs)

    for sepolicy_dir in sepolicy_dirs:
        # print "walking",sepolicy_dir
        for root, dirs, files in os.walk(sepolicy_dir, topdown=True):
            # skip all subdirs
            if root != sepolicy_dir: continue
            # print "root={} dirs={} files={}".format(root,dirs,files)
            print("-" * 20)
            print("root=", root)
            for file in files:
                if file in sepolicy_build_files or file.endswith(".te"):
                    # print join(root,file)
                    grep_func(join(root, file))

        print("*file_count=", file_count)
        print("*line_count=", line_count)
        print("*matched=", matched_count)
