#!/usr/bin/env python3
# coding:utf8
import argparse
import os
import re
from os.path import join, basename

file_count = 0
line_count = 0

# $ANDROID_BUILD_TOP='/disk01/work/work_berg/COSHIP_X1_5_0_last'
android_build_top = os.getenv('ANDROID_BUILD_TOP')
SEPOLICY_DIRS = [android_build_top + "/device/qcom/sepolicy/common/", android_build_top + "/external/sepolicy/",
                 android_build_top + "/external/sepolicy/tios_sepolicy/"]

sepolicy_build_files = ['attributes', "security_classes", "access_vectors",
                        'mls', 'roles', 'users',
                        "initial_sids",
                        'policy_capabilities',
                        'fs_use',
                        'te_macros', "global_macros", 'mls_macros',
                        'file_contexts', 'genfs_contexts', 'initial_sid_contexts', 'port_contexts', 'service_contexts',
                        'tios_macros',
                        '*.te']
matched_count = 0
and_flag = True  #
words = list()
sepolicy_dirs = list()
flag_match_word = True


def whole_match(words, line):
    line_words = re.findall('\w+', line)
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w for w in words if w in line_words)):
        return True
    if and_flag and all([w in line_words for w in words]):
        return True
    return False


def part_match(words, line):
    # todo: 可以采用set的intersection和join操作来测试
    if (not and_flag) and any((w in line for w in words)):
        return True
    if and_flag and all([w in line for w in words]):
        return True
    return False


def grep_func(file_name):
    global and_flag
    global words
    global matched_count
    global line_count
    global file_count
    file_count = file_count + 1
    with open(file_name, 'r') as fh:
        for index, line in enumerate(fh):
            line = line.strip()
            if not line: continue
            if not line.startswith("#"):
                line_count = line_count + 1
            # print line

            if line.startswith("#") and not line.startswith("##"):
                continue

            matched = whole_match(words, line) if flag_match_word else part_match(words, line)
            if matched:
                print("{}({}):{}".format(basename(file_name), index, line.rstrip()))
                matched_count += 1


if __name__ == '__main__':
    myParser = argparse.ArgumentParser(description='在策略中查找关键字')
    myParser.add_argument('words', metavar='word', type=str, nargs='+', help='words list to search')
    myParser.add_argument('--or', action='store_false', dest="and_flag", default=True, help="或运算")
    myParser.add_argument('--and', action='store_true', dest="and_flag", help="与运算")
    myParser.add_argument('--here', action="store_true", default=False, help="仅搜索当前目录")
    myParser.add_argument('--part', action="store_false", default=True, help="部分匹配，默认为整字匹配")
    args = myParser.parse_args()

    # print args
    and_flag = args.and_flag
    words = args.words
    sepolicy_dirs = SEPOLICY_DIRS if not args.here else [os.path.abspath(os.path.curdir)]
    flag_match_word = args.part
    print("dirs=", sepolicy_dirs)

    for sepolicy_dir in sepolicy_dirs:
        # print "walking",sepolicy_dir
        for root, dirs, files in os.walk(sepolicy_dir, topdown=True):
            # skip all subdirs
            if root != sepolicy_dir: continue
            # print "root={} dirs={} files={}".format(root,dirs,files)
            print("-" * 20)
            print("root=", root)
            for file in files:
                if file in sepolicy_build_files or file.endswith(".te"):
                    # print join(root,file)
                    grep_func(join(root, file))

        print("*file_count=", file_count)
        print("*line_count=", line_count)
        print("*matched=", matched_count)
